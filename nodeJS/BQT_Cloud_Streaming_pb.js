// source: BQT_Cloud_Streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.pulse.BQTMessage', null, global);
goog.exportSymbol('proto.pulse.BQTMessage.PayloadCase', null, global);
goog.exportSymbol('proto.pulse.ConsolidatedVolume', null, global);
goog.exportSymbol('proto.pulse.Quote', null, global);
goog.exportSymbol('proto.pulse.SecurityStatus', null, global);
goog.exportSymbol('proto.pulse.SingleSidedQuote', null, global);
goog.exportSymbol('proto.pulse.StockSummary', null, global);
goog.exportSymbol('proto.pulse.SymbolClear', null, global);
goog.exportSymbol('proto.pulse.SymbolMapping', null, global);
goog.exportSymbol('proto.pulse.Trade', null, global);
goog.exportSymbol('proto.pulse.TradeCancelBust', null, global);
goog.exportSymbol('proto.pulse.TradeCorrection', null, global);
goog.exportSymbol('proto.pulse.TrfPriorDayTrade', null, global);
goog.exportSymbol('proto.pulse.TrfPriorDayTradeCancel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.BQTMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pulse.BQTMessage.oneofGroups_);
};
goog.inherits(proto.pulse.BQTMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.BQTMessage.displayName = 'proto.pulse.BQTMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.StockSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.StockSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.StockSummary.displayName = 'proto.pulse.StockSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.ConsolidatedVolume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.ConsolidatedVolume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.ConsolidatedVolume.displayName = 'proto.pulse.ConsolidatedVolume';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.Quote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.Quote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.Quote.displayName = 'proto.pulse.Quote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.SingleSidedQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.SingleSidedQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.SingleSidedQuote.displayName = 'proto.pulse.SingleSidedQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.SecurityStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.SecurityStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.SecurityStatus.displayName = 'proto.pulse.SecurityStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.SymbolMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.SymbolMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.SymbolMapping.displayName = 'proto.pulse.SymbolMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.SymbolClear = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.SymbolClear, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.SymbolClear.displayName = 'proto.pulse.SymbolClear';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.Trade.displayName = 'proto.pulse.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.TradeCorrection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.TradeCorrection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.TradeCorrection.displayName = 'proto.pulse.TradeCorrection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.TradeCancelBust = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.TradeCancelBust, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.TradeCancelBust.displayName = 'proto.pulse.TradeCancelBust';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.TrfPriorDayTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.TrfPriorDayTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.TrfPriorDayTrade.displayName = 'proto.pulse.TrfPriorDayTrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulse.TrfPriorDayTradeCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulse.TrfPriorDayTradeCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulse.TrfPriorDayTradeCancel.displayName = 'proto.pulse.TrfPriorDayTradeCancel';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pulse.BQTMessage.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.pulse.BQTMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  TRADE: 2,
  TRADE_CORR: 3,
  TRADE_CANCEL: 4,
  PRIOR_TRADE: 5,
  PRIOR_TRADE_CANCEL: 6,
  QUOTE: 7,
  SINGLE_SIDED_QUOTE: 8,
  SYMBOL_MAPPING: 9,
  SECURITY_STATUS: 10,
  SYMBOL_CLEAR: 11,
  CONS_VOL: 12,
  SSM: 13
};

/**
 * @return {proto.pulse.BQTMessage.PayloadCase}
 */
proto.pulse.BQTMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.pulse.BQTMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.pulse.BQTMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.BQTMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.BQTMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.BQTMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.BQTMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    trade: (f = msg.getTrade()) && proto.pulse.Trade.toObject(includeInstance, f),
    tradeCorr: (f = msg.getTradeCorr()) && proto.pulse.TradeCorrection.toObject(includeInstance, f),
    tradeCancel: (f = msg.getTradeCancel()) && proto.pulse.TradeCancelBust.toObject(includeInstance, f),
    priorTrade: (f = msg.getPriorTrade()) && proto.pulse.TrfPriorDayTrade.toObject(includeInstance, f),
    priorTradeCancel: (f = msg.getPriorTradeCancel()) && proto.pulse.TrfPriorDayTradeCancel.toObject(includeInstance, f),
    quote: (f = msg.getQuote()) && proto.pulse.Quote.toObject(includeInstance, f),
    singleSidedQuote: (f = msg.getSingleSidedQuote()) && proto.pulse.SingleSidedQuote.toObject(includeInstance, f),
    symbolMapping: (f = msg.getSymbolMapping()) && proto.pulse.SymbolMapping.toObject(includeInstance, f),
    securityStatus: (f = msg.getSecurityStatus()) && proto.pulse.SecurityStatus.toObject(includeInstance, f),
    symbolClear: (f = msg.getSymbolClear()) && proto.pulse.SymbolClear.toObject(includeInstance, f),
    consVol: (f = msg.getConsVol()) && proto.pulse.ConsolidatedVolume.toObject(includeInstance, f),
    ssm: (f = msg.getSsm()) && proto.pulse.StockSummary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.BQTMessage}
 */
proto.pulse.BQTMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.BQTMessage;
  return proto.pulse.BQTMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.BQTMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.BQTMessage}
 */
proto.pulse.BQTMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgType(value);
      break;
    case 2:
      var value = new proto.pulse.Trade;
      reader.readMessage(value,proto.pulse.Trade.deserializeBinaryFromReader);
      msg.setTrade(value);
      break;
    case 3:
      var value = new proto.pulse.TradeCorrection;
      reader.readMessage(value,proto.pulse.TradeCorrection.deserializeBinaryFromReader);
      msg.setTradeCorr(value);
      break;
    case 4:
      var value = new proto.pulse.TradeCancelBust;
      reader.readMessage(value,proto.pulse.TradeCancelBust.deserializeBinaryFromReader);
      msg.setTradeCancel(value);
      break;
    case 5:
      var value = new proto.pulse.TrfPriorDayTrade;
      reader.readMessage(value,proto.pulse.TrfPriorDayTrade.deserializeBinaryFromReader);
      msg.setPriorTrade(value);
      break;
    case 6:
      var value = new proto.pulse.TrfPriorDayTradeCancel;
      reader.readMessage(value,proto.pulse.TrfPriorDayTradeCancel.deserializeBinaryFromReader);
      msg.setPriorTradeCancel(value);
      break;
    case 7:
      var value = new proto.pulse.Quote;
      reader.readMessage(value,proto.pulse.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    case 8:
      var value = new proto.pulse.SingleSidedQuote;
      reader.readMessage(value,proto.pulse.SingleSidedQuote.deserializeBinaryFromReader);
      msg.setSingleSidedQuote(value);
      break;
    case 9:
      var value = new proto.pulse.SymbolMapping;
      reader.readMessage(value,proto.pulse.SymbolMapping.deserializeBinaryFromReader);
      msg.setSymbolMapping(value);
      break;
    case 10:
      var value = new proto.pulse.SecurityStatus;
      reader.readMessage(value,proto.pulse.SecurityStatus.deserializeBinaryFromReader);
      msg.setSecurityStatus(value);
      break;
    case 11:
      var value = new proto.pulse.SymbolClear;
      reader.readMessage(value,proto.pulse.SymbolClear.deserializeBinaryFromReader);
      msg.setSymbolClear(value);
      break;
    case 12:
      var value = new proto.pulse.ConsolidatedVolume;
      reader.readMessage(value,proto.pulse.ConsolidatedVolume.deserializeBinaryFromReader);
      msg.setConsVol(value);
      break;
    case 13:
      var value = new proto.pulse.StockSummary;
      reader.readMessage(value,proto.pulse.StockSummary.deserializeBinaryFromReader);
      msg.setSsm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.BQTMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.BQTMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.BQTMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.BQTMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTrade();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pulse.Trade.serializeBinaryToWriter
    );
  }
  f = message.getTradeCorr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pulse.TradeCorrection.serializeBinaryToWriter
    );
  }
  f = message.getTradeCancel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pulse.TradeCancelBust.serializeBinaryToWriter
    );
  }
  f = message.getPriorTrade();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pulse.TrfPriorDayTrade.serializeBinaryToWriter
    );
  }
  f = message.getPriorTradeCancel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pulse.TrfPriorDayTradeCancel.serializeBinaryToWriter
    );
  }
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pulse.Quote.serializeBinaryToWriter
    );
  }
  f = message.getSingleSidedQuote();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pulse.SingleSidedQuote.serializeBinaryToWriter
    );
  }
  f = message.getSymbolMapping();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.pulse.SymbolMapping.serializeBinaryToWriter
    );
  }
  f = message.getSecurityStatus();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.pulse.SecurityStatus.serializeBinaryToWriter
    );
  }
  f = message.getSymbolClear();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.pulse.SymbolClear.serializeBinaryToWriter
    );
  }
  f = message.getConsVol();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.pulse.ConsolidatedVolume.serializeBinaryToWriter
    );
  }
  f = message.getSsm();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.pulse.StockSummary.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 msg_type = 1;
 * @return {number}
 */
proto.pulse.BQTMessage.prototype.getMsgType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.setMsgType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearMsgType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasMsgType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Trade trade = 2;
 * @return {?proto.pulse.Trade}
 */
proto.pulse.BQTMessage.prototype.getTrade = function() {
  return /** @type{?proto.pulse.Trade} */ (
    jspb.Message.getWrapperField(this, proto.pulse.Trade, 2));
};


/**
 * @param {?proto.pulse.Trade|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setTrade = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearTrade = function() {
  return this.setTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasTrade = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TradeCorrection trade_corr = 3;
 * @return {?proto.pulse.TradeCorrection}
 */
proto.pulse.BQTMessage.prototype.getTradeCorr = function() {
  return /** @type{?proto.pulse.TradeCorrection} */ (
    jspb.Message.getWrapperField(this, proto.pulse.TradeCorrection, 3));
};


/**
 * @param {?proto.pulse.TradeCorrection|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setTradeCorr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearTradeCorr = function() {
  return this.setTradeCorr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasTradeCorr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TradeCancelBust trade_cancel = 4;
 * @return {?proto.pulse.TradeCancelBust}
 */
proto.pulse.BQTMessage.prototype.getTradeCancel = function() {
  return /** @type{?proto.pulse.TradeCancelBust} */ (
    jspb.Message.getWrapperField(this, proto.pulse.TradeCancelBust, 4));
};


/**
 * @param {?proto.pulse.TradeCancelBust|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setTradeCancel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearTradeCancel = function() {
  return this.setTradeCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasTradeCancel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TrfPriorDayTrade prior_trade = 5;
 * @return {?proto.pulse.TrfPriorDayTrade}
 */
proto.pulse.BQTMessage.prototype.getPriorTrade = function() {
  return /** @type{?proto.pulse.TrfPriorDayTrade} */ (
    jspb.Message.getWrapperField(this, proto.pulse.TrfPriorDayTrade, 5));
};


/**
 * @param {?proto.pulse.TrfPriorDayTrade|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setPriorTrade = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearPriorTrade = function() {
  return this.setPriorTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasPriorTrade = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TrfPriorDayTradeCancel prior_trade_cancel = 6;
 * @return {?proto.pulse.TrfPriorDayTradeCancel}
 */
proto.pulse.BQTMessage.prototype.getPriorTradeCancel = function() {
  return /** @type{?proto.pulse.TrfPriorDayTradeCancel} */ (
    jspb.Message.getWrapperField(this, proto.pulse.TrfPriorDayTradeCancel, 6));
};


/**
 * @param {?proto.pulse.TrfPriorDayTradeCancel|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setPriorTradeCancel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearPriorTradeCancel = function() {
  return this.setPriorTradeCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasPriorTradeCancel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Quote quote = 7;
 * @return {?proto.pulse.Quote}
 */
proto.pulse.BQTMessage.prototype.getQuote = function() {
  return /** @type{?proto.pulse.Quote} */ (
    jspb.Message.getWrapperField(this, proto.pulse.Quote, 7));
};


/**
 * @param {?proto.pulse.Quote|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setQuote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearQuote = function() {
  return this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SingleSidedQuote single_sided_quote = 8;
 * @return {?proto.pulse.SingleSidedQuote}
 */
proto.pulse.BQTMessage.prototype.getSingleSidedQuote = function() {
  return /** @type{?proto.pulse.SingleSidedQuote} */ (
    jspb.Message.getWrapperField(this, proto.pulse.SingleSidedQuote, 8));
};


/**
 * @param {?proto.pulse.SingleSidedQuote|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setSingleSidedQuote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearSingleSidedQuote = function() {
  return this.setSingleSidedQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasSingleSidedQuote = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SymbolMapping symbol_mapping = 9;
 * @return {?proto.pulse.SymbolMapping}
 */
proto.pulse.BQTMessage.prototype.getSymbolMapping = function() {
  return /** @type{?proto.pulse.SymbolMapping} */ (
    jspb.Message.getWrapperField(this, proto.pulse.SymbolMapping, 9));
};


/**
 * @param {?proto.pulse.SymbolMapping|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setSymbolMapping = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearSymbolMapping = function() {
  return this.setSymbolMapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasSymbolMapping = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SecurityStatus security_status = 10;
 * @return {?proto.pulse.SecurityStatus}
 */
proto.pulse.BQTMessage.prototype.getSecurityStatus = function() {
  return /** @type{?proto.pulse.SecurityStatus} */ (
    jspb.Message.getWrapperField(this, proto.pulse.SecurityStatus, 10));
};


/**
 * @param {?proto.pulse.SecurityStatus|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setSecurityStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearSecurityStatus = function() {
  return this.setSecurityStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasSecurityStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SymbolClear symbol_clear = 11;
 * @return {?proto.pulse.SymbolClear}
 */
proto.pulse.BQTMessage.prototype.getSymbolClear = function() {
  return /** @type{?proto.pulse.SymbolClear} */ (
    jspb.Message.getWrapperField(this, proto.pulse.SymbolClear, 11));
};


/**
 * @param {?proto.pulse.SymbolClear|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setSymbolClear = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearSymbolClear = function() {
  return this.setSymbolClear(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasSymbolClear = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ConsolidatedVolume cons_vol = 12;
 * @return {?proto.pulse.ConsolidatedVolume}
 */
proto.pulse.BQTMessage.prototype.getConsVol = function() {
  return /** @type{?proto.pulse.ConsolidatedVolume} */ (
    jspb.Message.getWrapperField(this, proto.pulse.ConsolidatedVolume, 12));
};


/**
 * @param {?proto.pulse.ConsolidatedVolume|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setConsVol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearConsVol = function() {
  return this.setConsVol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasConsVol = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StockSummary ssm = 13;
 * @return {?proto.pulse.StockSummary}
 */
proto.pulse.BQTMessage.prototype.getSsm = function() {
  return /** @type{?proto.pulse.StockSummary} */ (
    jspb.Message.getWrapperField(this, proto.pulse.StockSummary, 13));
};


/**
 * @param {?proto.pulse.StockSummary|undefined} value
 * @return {!proto.pulse.BQTMessage} returns this
*/
proto.pulse.BQTMessage.prototype.setSsm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.pulse.BQTMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulse.BQTMessage} returns this
 */
proto.pulse.BQTMessage.prototype.clearSsm = function() {
  return this.setSsm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.BQTMessage.prototype.hasSsm = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.StockSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.StockSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.StockSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.StockSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    hiprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    loprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    listingmktopenprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    grpvol: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    mktofhiprice: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    mktofloprice: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    mktofopenprice: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    numclsprice: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    mktofcloseprice: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    listingmktcloseprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    conshiprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    consloprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    consfirstprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    conslastprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    complete: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.StockSummary}
 */
proto.pulse.StockSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.StockSummary;
  return proto.pulse.StockSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.StockSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.StockSummary}
 */
proto.pulse.StockSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHiprice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setListingmktopenprice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrpvol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMktofhiprice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMktofloprice(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMktofopenprice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumclsprice(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMktofcloseprice(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setListingmktcloseprice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConshiprice(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConsloprice(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConsfirstprice(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConslastprice(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.StockSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.StockSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.StockSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.StockSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double hiprice = 4;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getHiprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setHiprice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearHiprice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasHiprice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double loprice = 5;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getLoprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setLoprice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearLoprice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasLoprice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double listingmktopenprice = 6;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getListingmktopenprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setListingmktopenprice = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearListingmktopenprice = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasListingmktopenprice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 grpvol = 7;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getGrpvol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setGrpvol = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearGrpvol = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasGrpvol = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string mktofhiprice = 8;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getMktofhiprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setMktofhiprice = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearMktofhiprice = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasMktofhiprice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string mktofloprice = 9;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getMktofloprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setMktofloprice = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearMktofloprice = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasMktofloprice = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string mktofopenprice = 10;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getMktofopenprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setMktofopenprice = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearMktofopenprice = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasMktofopenprice = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 numclsprice = 11;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getNumclsprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setNumclsprice = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearNumclsprice = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasNumclsprice = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string mktofcloseprice = 12;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getMktofcloseprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setMktofcloseprice = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearMktofcloseprice = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasMktofcloseprice = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double listingmktcloseprice = 13;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getListingmktcloseprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setListingmktcloseprice = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearListingmktcloseprice = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasListingmktcloseprice = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double conshiprice = 14;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getConshiprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setConshiprice = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearConshiprice = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasConshiprice = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double consloprice = 15;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getConsloprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setConsloprice = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearConsloprice = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasConsloprice = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double consfirstprice = 16;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getConsfirstprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setConsfirstprice = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearConsfirstprice = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasConsfirstprice = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double conslastprice = 17;
 * @return {number}
 */
proto.pulse.StockSummary.prototype.getConslastprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setConslastprice = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearConslastprice = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasConslastprice = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string complete = 18;
 * @return {string}
 */
proto.pulse.StockSummary.prototype.getComplete = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.setComplete = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.StockSummary} returns this
 */
proto.pulse.StockSummary.prototype.clearComplete = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.StockSummary.prototype.hasComplete = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.ConsolidatedVolume.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.ConsolidatedVolume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.ConsolidatedVolume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.ConsolidatedVolume.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    consvol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    complete: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.ConsolidatedVolume}
 */
proto.pulse.ConsolidatedVolume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.ConsolidatedVolume;
  return proto.pulse.ConsolidatedVolume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.ConsolidatedVolume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.ConsolidatedVolume}
 */
proto.pulse.ConsolidatedVolume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConsvol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.ConsolidatedVolume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.ConsolidatedVolume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.ConsolidatedVolume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.ConsolidatedVolume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.ConsolidatedVolume.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.ConsolidatedVolume.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.pulse.ConsolidatedVolume.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.ConsolidatedVolume.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 consvol = 3;
 * @return {number}
 */
proto.pulse.ConsolidatedVolume.prototype.getConsvol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.setConsvol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.clearConsvol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.ConsolidatedVolume.prototype.hasConsvol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.pulse.ConsolidatedVolume.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.clearReason = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.ConsolidatedVolume.prototype.hasReason = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string complete = 5;
 * @return {string}
 */
proto.pulse.ConsolidatedVolume.prototype.getComplete = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.setComplete = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.ConsolidatedVolume} returns this
 */
proto.pulse.ConsolidatedVolume.prototype.clearComplete = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.ConsolidatedVolume.prototype.hasComplete = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.Quote.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.Quote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.Quote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.Quote.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    askprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    askvolume: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    bidprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    bidvolume: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    askcondition: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    bidcondition: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    retailpriceindicator: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    askmarketid: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    bidmarketid: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.Quote}
 */
proto.pulse.Quote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.Quote;
  return proto.pulse.Quote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.Quote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.Quote}
 */
proto.pulse.Quote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAskprice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAskvolume(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBidprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBidvolume(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAskcondition(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidcondition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRetailpriceindicator(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAskmarketid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidmarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.Quote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.Quote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.Quote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.Quote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.Quote.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.pulse.Quote.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double askprice = 3;
 * @return {number}
 */
proto.pulse.Quote.prototype.getAskprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setAskprice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearAskprice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasAskprice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 askvolume = 4;
 * @return {number}
 */
proto.pulse.Quote.prototype.getAskvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setAskvolume = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearAskvolume = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasAskvolume = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double bidprice = 5;
 * @return {number}
 */
proto.pulse.Quote.prototype.getBidprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setBidprice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearBidprice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasBidprice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 bidvolume = 6;
 * @return {number}
 */
proto.pulse.Quote.prototype.getBidvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setBidvolume = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearBidvolume = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasBidvolume = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string askcondition = 7;
 * @return {string}
 */
proto.pulse.Quote.prototype.getAskcondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setAskcondition = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearAskcondition = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasAskcondition = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string bidcondition = 8;
 * @return {string}
 */
proto.pulse.Quote.prototype.getBidcondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setBidcondition = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearBidcondition = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasBidcondition = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string retailpriceindicator = 9;
 * @return {string}
 */
proto.pulse.Quote.prototype.getRetailpriceindicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setRetailpriceindicator = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearRetailpriceindicator = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasRetailpriceindicator = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string askmarketid = 10;
 * @return {string}
 */
proto.pulse.Quote.prototype.getAskmarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setAskmarketid = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearAskmarketid = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasAskmarketid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string bidmarketid = 11;
 * @return {string}
 */
proto.pulse.Quote.prototype.getBidmarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.setBidmarketid = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Quote} returns this
 */
proto.pulse.Quote.prototype.clearBidmarketid = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Quote.prototype.hasBidmarketid = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.SingleSidedQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.SingleSidedQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.SingleSidedQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SingleSidedQuote.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    side: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    condition: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    retailpriceindicator: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.SingleSidedQuote}
 */
proto.pulse.SingleSidedQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.SingleSidedQuote;
  return proto.pulse.SingleSidedQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.SingleSidedQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.SingleSidedQuote}
 */
proto.pulse.SingleSidedQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRetailpriceindicator(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.SingleSidedQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.SingleSidedQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.SingleSidedQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SingleSidedQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.SingleSidedQuote.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.pulse.SingleSidedQuote.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string side = 3;
 * @return {string}
 */
proto.pulse.SingleSidedQuote.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setSide = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearSide = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasSide = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.pulse.SingleSidedQuote.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 volume = 5;
 * @return {number}
 */
proto.pulse.SingleSidedQuote.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string condition = 6;
 * @return {string}
 */
proto.pulse.SingleSidedQuote.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setCondition = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearCondition = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string retailpriceindicator = 7;
 * @return {string}
 */
proto.pulse.SingleSidedQuote.prototype.getRetailpriceindicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setRetailpriceindicator = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearRetailpriceindicator = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasRetailpriceindicator = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string marketid = 8;
 * @return {string}
 */
proto.pulse.SingleSidedQuote.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SingleSidedQuote} returns this
 */
proto.pulse.SingleSidedQuote.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SingleSidedQuote.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.SecurityStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.SecurityStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.SecurityStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SecurityStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    securitystatus: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    haltcond: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    price1: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    price2: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    ssrexch: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    ssrvol: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    time: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    ssrstate: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    marketstate: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.SecurityStatus}
 */
proto.pulse.SecurityStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.SecurityStatus;
  return proto.pulse.SecurityStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.SecurityStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.SecurityStatus}
 */
proto.pulse.SecurityStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecuritystatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHaltcond(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice1(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice2(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsrexch(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSsrvol(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsrstate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.SecurityStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.SecurityStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.SecurityStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SecurityStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string securitystatus = 4;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getSecuritystatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSecuritystatus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSecuritystatus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSecuritystatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string haltcond = 5;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getHaltcond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setHaltcond = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearHaltcond = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasHaltcond = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string marketid = 6;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double price1 = 7;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getPrice1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setPrice1 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearPrice1 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasPrice1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double price2 = 8;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getPrice2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setPrice2 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearPrice2 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasPrice2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string ssrexch = 9;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getSsrexch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSsrexch = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSsrexch = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSsrexch = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 ssrvol = 10;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getSsrvol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSsrvol = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSsrvol = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSsrvol = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 time = 11;
 * @return {number}
 */
proto.pulse.SecurityStatus.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearTime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasTime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string ssrstate = 12;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getSsrstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setSsrstate = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearSsrstate = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasSsrstate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string marketstate = 13;
 * @return {string}
 */
proto.pulse.SecurityStatus.prototype.getMarketstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.setMarketstate = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SecurityStatus} returns this
 */
proto.pulse.SecurityStatus.prototype.clearMarketstate = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SecurityStatus.prototype.hasMarketstate = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.SymbolMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.SymbolMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.SymbolMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SymbolMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    symbolid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    systemid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    exchcode: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    pricescale: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    securitytype: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    lotsize: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    precloseprice: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    preclosevol: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    priceres: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    roundlotac: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    mpv: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    unitoftrade: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.SymbolMapping}
 */
proto.pulse.SymbolMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.SymbolMapping;
  return proto.pulse.SymbolMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.SymbolMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.SymbolMapping}
 */
proto.pulse.SymbolMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSymbolid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchcode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPricescale(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecuritytype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLotsize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrecloseprice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreclosevol(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceres(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoundlotac(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMpv(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnitoftrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.SymbolMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.SymbolMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.SymbolMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SymbolMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 symbolid = 2;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getSymbolid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setSymbolid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearSymbolid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasSymbolid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string marketid = 4;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 systemid = 5;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getSystemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setSystemid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearSystemid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasSystemid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string exchcode = 6;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getExchcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setExchcode = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearExchcode = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasExchcode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 pricescale = 7;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getPricescale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setPricescale = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearPricescale = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasPricescale = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string securitytype = 8;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getSecuritytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setSecuritytype = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearSecuritytype = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasSecuritytype = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 lotsize = 9;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getLotsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setLotsize = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearLotsize = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasLotsize = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double precloseprice = 10;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getPrecloseprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setPrecloseprice = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearPrecloseprice = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasPrecloseprice = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 preclosevol = 11;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getPreclosevol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setPreclosevol = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearPreclosevol = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasPreclosevol = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string priceres = 12;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getPriceres = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setPriceres = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearPriceres = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasPriceres = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string roundlotac = 13;
 * @return {string}
 */
proto.pulse.SymbolMapping.prototype.getRoundlotac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setRoundlotac = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearRoundlotac = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasRoundlotac = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double mpv = 14;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getMpv = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setMpv = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearMpv = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasMpv = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 unitoftrade = 15;
 * @return {number}
 */
proto.pulse.SymbolMapping.prototype.getUnitoftrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.setUnitoftrade = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolMapping} returns this
 */
proto.pulse.SymbolMapping.prototype.clearUnitoftrade = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolMapping.prototype.hasUnitoftrade = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.SymbolClear.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.SymbolClear.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.SymbolClear} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SymbolClear.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    nextsourceseq: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.SymbolClear}
 */
proto.pulse.SymbolClear.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.SymbolClear;
  return proto.pulse.SymbolClear.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.SymbolClear} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.SymbolClear}
 */
proto.pulse.SymbolClear.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNextsourceseq(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.SymbolClear.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.SymbolClear.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.SymbolClear} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.SymbolClear.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.SymbolClear.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolClear.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.SymbolClear.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolClear.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.SymbolClear.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolClear.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 nextsourceseq = 4;
 * @return {number}
 */
proto.pulse.SymbolClear.prototype.getNextsourceseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.setNextsourceseq = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.clearNextsourceseq = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolClear.prototype.hasNextsourceseq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string marketid = 5;
 * @return {string}
 */
proto.pulse.SymbolClear.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.SymbolClear} returns this
 */
proto.pulse.SymbolClear.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.SymbolClear.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tradeid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    tradecondition1: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    tradecondition2: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    tradecondition3: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    tradecondition4: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    fhSourcetime: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    fhSourcetimens: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    ppsSourcetime: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    ppsSourcetimens: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.Trade}
 */
proto.pulse.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.Trade;
  return proto.pulse.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.Trade}
 */
proto.pulse.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradeid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition1(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition2(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition3(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition4(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFhSourcetime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFhSourcetimens(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPpsSourcetime(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPpsSourcetimens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint64(
      15,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.Trade.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.Trade.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.Trade.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 tradeid = 4;
 * @return {number}
 */
proto.pulse.Trade.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setTradeid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearTradeid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasTradeid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.pulse.Trade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 volume = 6;
 * @return {number}
 */
proto.pulse.Trade.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string tradecondition1 = 7;
 * @return {string}
 */
proto.pulse.Trade.prototype.getTradecondition1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setTradecondition1 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearTradecondition1 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasTradecondition1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string tradecondition2 = 8;
 * @return {string}
 */
proto.pulse.Trade.prototype.getTradecondition2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setTradecondition2 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearTradecondition2 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasTradecondition2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string tradecondition3 = 9;
 * @return {string}
 */
proto.pulse.Trade.prototype.getTradecondition3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setTradecondition3 = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearTradecondition3 = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasTradecondition3 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string tradecondition4 = 10;
 * @return {string}
 */
proto.pulse.Trade.prototype.getTradecondition4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setTradecondition4 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearTradecondition4 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasTradecondition4 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string marketid = 11;
 * @return {string}
 */
proto.pulse.Trade.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint64 fh_sourcetime = 12;
 * @return {number}
 */
proto.pulse.Trade.prototype.getFhSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setFhSourcetime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearFhSourcetime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasFhSourcetime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint64 fh_sourcetimeNS = 13;
 * @return {number}
 */
proto.pulse.Trade.prototype.getFhSourcetimens = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setFhSourcetimens = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearFhSourcetimens = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasFhSourcetimens = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 pps_sourcetime = 14;
 * @return {number}
 */
proto.pulse.Trade.prototype.getPpsSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setPpsSourcetime = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearPpsSourcetime = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasPpsSourcetime = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 pps_sourcetimeNS = 15;
 * @return {number}
 */
proto.pulse.Trade.prototype.getPpsSourcetimens = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.setPpsSourcetimens = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.Trade} returns this
 */
proto.pulse.Trade.prototype.clearPpsSourcetimens = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.Trade.prototype.hasPpsSourcetimens = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.TradeCorrection.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.TradeCorrection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.TradeCorrection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TradeCorrection.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    origtradeid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    tradeid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    tradecondition1: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    tradecondition2: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    tradecondition3: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    tradecondition4: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.TradeCorrection}
 */
proto.pulse.TradeCorrection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.TradeCorrection;
  return proto.pulse.TradeCorrection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.TradeCorrection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.TradeCorrection}
 */
proto.pulse.TradeCorrection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrigtradeid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradeid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition1(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition2(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition3(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition4(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.TradeCorrection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.TradeCorrection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.TradeCorrection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TradeCorrection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 origtradeid = 4;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getOrigtradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setOrigtradeid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearOrigtradeid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasOrigtradeid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 tradeid = 5;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setTradeid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearTradeid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasTradeid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double price = 6;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 volume = 7;
 * @return {number}
 */
proto.pulse.TradeCorrection.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string tradecondition1 = 8;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getTradecondition1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setTradecondition1 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearTradecondition1 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasTradecondition1 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string tradecondition2 = 9;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getTradecondition2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setTradecondition2 = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearTradecondition2 = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasTradecondition2 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string tradecondition3 = 10;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getTradecondition3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setTradecondition3 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearTradecondition3 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasTradecondition3 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string tradecondition4 = 11;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getTradecondition4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setTradecondition4 = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearTradecondition4 = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasTradecondition4 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string marketid = 12;
 * @return {string}
 */
proto.pulse.TradeCorrection.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCorrection} returns this
 */
proto.pulse.TradeCorrection.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCorrection.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.TradeCancelBust.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.TradeCancelBust.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.TradeCancelBust} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TradeCancelBust.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    origtradeid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    marketid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.TradeCancelBust}
 */
proto.pulse.TradeCancelBust.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.TradeCancelBust;
  return proto.pulse.TradeCancelBust.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.TradeCancelBust} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.TradeCancelBust}
 */
proto.pulse.TradeCancelBust.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrigtradeid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.TradeCancelBust.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.TradeCancelBust.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.TradeCancelBust} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TradeCancelBust.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.TradeCancelBust.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCancelBust.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.TradeCancelBust.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCancelBust.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.TradeCancelBust.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCancelBust.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 origtradeid = 4;
 * @return {number}
 */
proto.pulse.TradeCancelBust.prototype.getOrigtradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.setOrigtradeid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.clearOrigtradeid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCancelBust.prototype.hasOrigtradeid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string marketid = 5;
 * @return {string}
 */
proto.pulse.TradeCancelBust.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TradeCancelBust} returns this
 */
proto.pulse.TradeCancelBust.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TradeCancelBust.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.TrfPriorDayTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.TrfPriorDayTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.TrfPriorDayTrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TrfPriorDayTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tradeid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    tradecondition1: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    tradecondition2: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    tradecondition3: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    tradecondition4: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    priordaytime: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.TrfPriorDayTrade}
 */
proto.pulse.TrfPriorDayTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.TrfPriorDayTrade;
  return proto.pulse.TrfPriorDayTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.TrfPriorDayTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.TrfPriorDayTrade}
 */
proto.pulse.TrfPriorDayTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradeid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition1(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition2(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition3(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradecondition4(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriordaytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.TrfPriorDayTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.TrfPriorDayTrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.TrfPriorDayTrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TrfPriorDayTrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.TrfPriorDayTrade.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 tradeid = 4;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setTradeid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearTradeid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasTradeid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 volume = 6;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string tradecondition1 = 7;
 * @return {string}
 */
proto.pulse.TrfPriorDayTrade.prototype.getTradecondition1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setTradecondition1 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearTradecondition1 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasTradecondition1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string tradecondition2 = 8;
 * @return {string}
 */
proto.pulse.TrfPriorDayTrade.prototype.getTradecondition2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setTradecondition2 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearTradecondition2 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasTradecondition2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string tradecondition3 = 9;
 * @return {string}
 */
proto.pulse.TrfPriorDayTrade.prototype.getTradecondition3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setTradecondition3 = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearTradecondition3 = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasTradecondition3 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string tradecondition4 = 10;
 * @return {string}
 */
proto.pulse.TrfPriorDayTrade.prototype.getTradecondition4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setTradecondition4 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearTradecondition4 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasTradecondition4 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 priordaytime = 11;
 * @return {number}
 */
proto.pulse.TrfPriorDayTrade.prototype.getPriordaytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.setPriordaytime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTrade} returns this
 */
proto.pulse.TrfPriorDayTrade.prototype.clearPriordaytime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTrade.prototype.hasPriordaytime = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.pulse.TrfPriorDayTradeCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulse.TrfPriorDayTradeCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TrfPriorDayTradeCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedmsgseq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourcetime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tradeid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    priordaytime: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulse.TrfPriorDayTradeCancel}
 */
proto.pulse.TrfPriorDayTradeCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulse.TrfPriorDayTradeCancel;
  return proto.pulse.TrfPriorDayTradeCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulse.TrfPriorDayTradeCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulse.TrfPriorDayTradeCancel}
 */
proto.pulse.TrfPriorDayTradeCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeedmsgseq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourcetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTradeid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriordaytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulse.TrfPriorDayTradeCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulse.TrfPriorDayTradeCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulse.TrfPriorDayTradeCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 feedmsgseq = 1;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getFeedmsgseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setFeedmsgseq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearFeedmsgseq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasFeedmsgseq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 sourcetime = 2;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getSourcetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setSourcetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearSourcetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasSourcetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 tradeid = 4;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setTradeid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearTradeid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasTradeid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 volume = 6;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 priordaytime = 7;
 * @return {number}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.getPriordaytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.setPriordaytime = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pulse.TrfPriorDayTradeCancel} returns this
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.clearPriordaytime = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulse.TrfPriorDayTradeCancel.prototype.hasPriordaytime = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.pulse);
